/// <reference types="node" />
import { GlobOptions, GlobSrcInfo } from './util/glob';
import { TraceResult, CheckTextInfo } from 'cspell-lib';
export { TraceResult, IncludeExcludeFlag } from 'cspell-lib';
import { IOptions } from './util/IOptions';
import { DebugEmitter, Emitters, MessageEmitter, ProgressEmitter, SpellingErrorEmitter, Issue } from './emitters';
export interface CSpellApplicationOptions extends BaseOptions {
    /**
     * Display verbose information
     */
    verbose?: boolean;
    /**
     * Show extensive output.
     */
    debug?: boolean;
    /**
     * a globs to exclude files from being checked.
     */
    exclude?: string[] | string;
    /**
     * Only report the words, no line numbers or file names.
     */
    wordsOnly?: boolean;
    /**
     * unique errors per file only.
     */
    unique?: boolean;
    /**
     * root directory, defaults to `cwd`
     */
    root?: string;
    /**
     * Show part of a line where an issue is found.
     * if true, it will show the default number of characters on either side.
     * if a number, it will shat number of characters on either side.
     */
    showContext?: boolean | number;
    /**
     * Show suggestions for spelling errors.
     */
    showSuggestions?: boolean;
}
export declare type TraceOptions = BaseOptions;
export interface BaseOptions {
    config?: string;
    languageId?: string;
    locale?: string;
    local?: string;
}
export declare type AppError = NodeJS.ErrnoException;
export interface RunResult {
    files: number;
    filesWithIssues: Set<string>;
    issues: number;
    errors: number;
}
export declare class CSpellApplicationConfiguration {
    readonly files: string[];
    readonly options: CSpellApplicationOptions;
    readonly emitters: Emitters;
    readonly info: MessageEmitter;
    readonly progress: ProgressEmitter;
    readonly debug: DebugEmitter;
    readonly logIssue: SpellingErrorEmitter;
    readonly uniqueFilter: (issue: Issue) => boolean;
    readonly locale: string;
    readonly configFile: string | undefined;
    readonly configGlobOptions: IOptions;
    readonly excludes: GlobSrcInfo[];
    readonly root: string;
    readonly showContext: number;
    constructor(files: string[], options: CSpellApplicationOptions, emitters: Emitters);
}
export declare function lint(files: string[], options: CSpellApplicationOptions, emitters: Emitters): Promise<RunResult>;
export declare function trace(words: string[], options: TraceOptions): Promise<TraceResult[]>;
export declare type CheckTextResult = CheckTextInfo;
export declare function checkText(filename: string, options: BaseOptions): Promise<CheckTextResult>;
export declare function createInit(): Promise<void>;
/**
 * Looks for matching glob patterns or stdin
 * @param globPatterns patterns or stdin
 */
declare function findFiles(globPatterns: string[], options: GlobOptions): Promise<string[]>;
export declare const _testing_: {
    findFiles: typeof findFiles;
};
